version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-4]
      - run:
          name: Build front-end
          command: |
            cd ~/project/frontend
            npm install
            npm run build
            echo "Current folder:"
            ls -l 
            cd dist
            echo "dist folder:"
            ls -l
      - save_cache:
          paths: 
            - frontend/node_modules
            - frontend/dist
          key: frontend-build-4

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-6a, backend-build-6b]
      - run:
          name: Back-end build
          command: |
            cd ~/project/backend
            npm install
            npm run build
            echo "Current folder:"
            ls -l 
            cd dist
            echo "dist folder:"
            ls -l
      - save_cache:
          paths: 
            - backend/node_modules
            - backend/dist
          key: backend-build-6a
            
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-4]
      - run:
          name: Test front-end
          command: |
            cd ~/project/frontend 
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-6a, backend-build-6b]
      - run:
          name: Back-end test
          command: |
             cd ~/project/backend
             npm run test
       
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-4]
      - run:
          name: Front-end scan
          command: |
            cd ~/project/frontend 
            echo "Audit:"
            npm audit --audit-level=critical
            
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-6a,backend-build-6b ]
      - run:
          name: Back-end scan
          command: |
            cd ~/project/backend
            ls -l
            echo "Audit:"
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
            ls -l
      - save_cache:
          paths: 
            - backend/package.json
            - backend/package-lock.json
          key: backend-build-6b
      - run:
          name: Back-end cat package.json
          command: |
            cd ~/project/backend
            ls -l
            cat package.json
            echo "fin"


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli 
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "BE-prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "FE-prod-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Cache PublicDnsName using MemStash
          command: |
            echo "Get PublicDnsName value:"
            PublicDnsName_val=$( 
              aws ec2 describe-instances  \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text )
            echo "Value PublicDnsName is: ${PublicDnsName_val}"

            echo "put DNS value into memStash:"
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
              --request PUT \
              --data ${PublicDnsName_val} \
                https://api.memstash.io/values/PublicDnsName_key

      - run:
          name: Cache PublicIpAddress using MemStash
          command: |
            echo "Get PublicIpAddress value:"
            PublicIpAddress_val=$( 
              aws ec2 describe-instances  \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text )
            echo "Value PublicIpAddress is: ${PublicIpAddress_val}"

            echo "put Ip value into memStash:"
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
              --request PUT \
              --data ${PublicIpAddress_val} \
                https://api.memstash.io/values/PublicIpAddress_key 

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > ~/project/.circleci/ansible/inventory.txt

            curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
              --request GET https://api.memstash.io/values/PublicIpAddress_key \
              >>  ~/project/.circleci/ansible/inventory.txt

            cat ~/project/.circleci/ansible/inventory.txt

      - run:
          name: install tar
          command: |
            yum -y install tar gzip

      - persist_to_workspace:
          name: Persisting to workspace
          root: ~/project
          paths: .circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
        environment:
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_MIGRATIONS: $TYPEORM_MIGRATIONS
          TYPEORM_ENTITIES: $TYPEORM_ENTITIES
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            
      - run:
          name: Configure server
          command: |
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt \
              .circleci/ansible/configure-server.yml 
            
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-6a,backend-build-6b ]
      - run:
          name: Run migrations
          command: |
            echo ENVIROMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd ~/project/backend

            echo "Display file backend/.env"
            find . -name "backend/.env"
            cat backend/.env

            echo "Run migrations:"
            npm run migrations > migrations_log.txt
            echo $?
            
            echo "Finding migrations_log.txt:"
            find . -name "migrations_log.txt"
            echo "Get value:"
            mig_result=$( grep -l "has been executed successfully" migrations_log.txt)
            mig_val=$([ ! -z "$mig_result" ] && echo "1" || echo "0" )
            echo "Value mig_val is: ${mig_val}"
            echo "put the mig_val value into web service memStash:"

            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
              --request PUT \
              --data ${mig_val} https://api.memstash.io/values/mig_key
            
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Install dependencies
          command: | 
            yum -y install tar gzip
      - attach_workspace:
          at: ~/project/
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(head -2 ~/project/.circleci/ansible/inventory.txt |tail -1)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd ~/project/frontend
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 sync ./dist s3://"prd-${CIRCLE_WORKFLOW_ID:0:7}" --delete

      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - run:
          name: Install dependencies
          command: | 
            yum -y install tar gzip  
      - attach_workspace:
          at: ~/project/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt \
              .circleci/ansible/deploy-backend.yml 


      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: alpine:latest 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
      - run:
          name: Get backend url
          command: |
            # your code here
            echo 1
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            echo 1
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            echo 1
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
